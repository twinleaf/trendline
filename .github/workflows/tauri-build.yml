name: publish
on:
  push:
    branches: [main]
  workflow_dispatch:
permissions:
  contents: write
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            args: '--target universal-apple-darwin' 
          - os: windows-latest
            args: ''
          - os: ubuntu-22.04
            args: ''
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust (add mac targets for universal)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libudev-dev \
            pkg-config \
            patchelf

      - name: Install frontend deps
        run: npm ci

      # ----- macOS signing: import your Developer ID .p12 into a temp keychain -----
      - name: Import Developer ID cert (macOS)
        if: runner.os == 'macOS'
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MACOS_SIGN_P12_B64: ${{ secrets.MACOS_SIGN_P12_B64 }}
          MACOS_SIGN_P12_PASSWORD: ${{ secrets.MACOS_SIGN_P12_PASSWORD }}
        run: |
          echo "$MACOS_SIGN_P12_B64" | base64 --decode > cert.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import cert.p12 -k build.keychain -P "$MACOS_SIGN_P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Resolve signing identity (macOS)
        if: runner.os == 'macOS'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -n1)
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "APPLE_SIGNING_IDENTITY=$CERT_ID" >> $GITHUB_ENV
          echo "Using identity: $CERT_ID"

      # ----- Build -----
      - name: Build with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
        with:
          tauriScript: npm run tauri
          args: ${{ matrix.args }}

      # ----- Notarize + staple (macOS) via App Store Connect API key -----
      - name: Notarize & Staple DMG (macOS)
        if: runner.os == 'macOS'
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_P8_B64: ${{ secrets.APPLE_API_KEY_P8_B64 }}
        run: |
          DMG=$(ls src-tauri/target/*-apple-darwin/release/bundle/dmg/*.dmg | head -n1)
          echo "$APPLE_API_KEY_P8_B64" | base64 --decode > AuthKey.p8
          xcrun notarytool submit "$DMG" \
            --key AuthKey.p8 \
            --key-id "$APPLE_API_KEY_ID" \
            --issuer "$APPLE_API_ISSUER" \
            --wait
          xcrun stapler staple "$DMG"
          xcrun stapler validate "$DMG"
          
      # ----- Windows signing (Azure Trusted Signing) - enable when ready -----
      - name: Sign Windows artifacts (Trusted Signing)
        if: runner.os == 'Windows'
        uses: azure/trusted-signing-action@v0.5.9
        with:
          # Auth (App Registration â€“ client secret)
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

          # Account details
          endpoint: ${{ secrets.AZURE_ENDPOINT }} # e.g. https://wus2.codesigning.azure.net/
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

          # What to sign: everything under Tauri's bundle dir
          files-folder: ${{ github.workspace }}\src-tauri\target\release\bundle
          files-folder-filter: exe,msi
          files-folder-recurse: true

          # Recommended extras
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      # ----- Upload everything for the final release job -----
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: src-tauri/target/**/release/bundle/**/*
          if-no-files-found: error

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read app version
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create single GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: app-v${{ env.APP_VERSION }}
          name: "App v${{ env.APP_VERSION }}"
          draft: true
          prerelease: false
          files: dist/**/*
